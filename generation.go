package melt

import (
	"fmt"
	"go/format"
	"os"
	"path/filepath"
	"strings"
)

type templates map[string]map[string]string // template -> variables
type calls map[string]map[string][]string   // parent template -> child template -> variables

type generationData struct {
	imports map[string]string
	templates
	calls
}

func Generate(file string, extentions []string, paths ...string) {

	m := New(WithGeneration(file), WithPrintRenderOutput(true))

	for _, path := range paths {

		filepath.Walk(path, func(path string, info os.FileInfo, _ error) error {
			if !info.IsDir() {
				path := formatPath(path)

				if !hasExtention(path, extentions) {
					return nil
				}

				name := strings.TrimSuffix(filepath.Base(path), filepath.Ext(path))
				root := name == "root" || strings.HasPrefix(name, "root_") || strings.HasPrefix(name, "root-")

				if !root {
					m.GetComponent(path, true)
				}
			}

			return nil
		})
	}

	m.generate()
}

func SplitIgnoreType(s string, sep rune) []string {
	var result []string
	var part string

	for i, r := range s {

		if strings.Index(part, "@type(") == 0 {
			part += string(r)

			if r == ')' && i+1 <= len(s)-1 && s[i+1] == byte(sep) {
				result = append(result, part)
				part = ""
			}

			continue
		}

		if r == sep {
			result = append(result, part)
			part = ""
			continue
		}

		part += string(r)
	}

	result = append(result, part)

	return result
}

func (f *Furnace) generate() {
	path := formatPath(f.GenerationOutputFile)
	name := strings.TrimSuffix(filepath.Base(path), filepath.Ext(path))

	components := make(map[string]string)
	dataTypes := make(map[string]string)
	writeFuncs := make(map[string]string)

	imports := ""

	for path, component := range f.Components {
		components[path] = component.Name

		for name, path := range component.generationData.imports {
			if path == "" {
				imports += fmt.Sprintf("\"%s\"\n", name)
				continue
			}
			imports += fmt.Sprintf("%s \"%s\"\n", name, path)
		}

		for k, v := range createTypes(component.Name, path, component.generationData) {
			dataTypes[k] = v
		}

		for k, v := range createWriteFuncs(component.Name, path, component.generationData) {
			writeFuncs[k] = v
		}
	}

	code := fmt.Sprintf(`
	// Code generated by melt; DO NOT EDIT.
	
	package %s

	import (
		"github.com/0-mqix/melt"
		"io"
		
		%s
	)
	
	`, name, imports)

	code += createVariables(components) + "\n\n"
	code += createLoad(components) + "\n\n"

	for k, v := range dataTypes {
		code += v + "\n\n"
		code += writeFuncs[k] + "\n\n"
	}

	bytes, err := format.Source([]byte(code))

	if err == nil {
		writeOutputFile(f.GenerationOutputFile, bytes)
	} else {
		fmt.Println(code)
		fmt.Println("[MELT] mqix is monkey:", err)
	}
}

func extractGenerationData(templateString string) *generationData {
	matches := TemplateFunctionRegex.FindAllStringSubmatch(templateString, -1)
	blocks := []string{""}

	imports := make(map[string]string)
	templates := make(templates)
	calls := make(calls)

	for _, match := range matches {
		tokens := SplitIgnoreType(match[1], ' ')

		for i, token := range tokens {

			if strings.Index(token, ".") == 0 {

				template := blocks[len(blocks)-1]

				if template == "range" || template == "with" {
					continue
				}

				dataType := "any"

				if i+1 <= len(tokens)-1 {
					result := TypeRegex.FindStringSubmatch(tokens[i+1])

					if len(result) != 0 {
						dataType = result[1]
						source := strings.Split(strings.TrimSpace(result[2]), " ")
						name := source[0]

						if len(result) == 3 && name != "" {
							if len(source) > 1 {
								imports[name] = source[1]
							} else {
								imports[name] = ""
							}
						}
					}
				}

				_, ok := templates[template]

				if !ok {
					templates[template] = map[string]string{token: dataType}
				} else {
					templates[template][token] = dataType
				}

			}
		}

		switch tokens[0] {
		case "define":
			if len(tokens) > 1 {
				blocks = append(blocks, tokens[1])
			}

		case "block", "template":

			if len(tokens) < 3 {
				continue
			}

			block := blocks[len(blocks)-1]
			template := tokens[1]
			variable := tokens[2]

			if _, ok := calls[block]; !ok {
				calls[block] = map[string][]string{variable: {template}}
			} else {
				calls[block][variable] = append(calls[block][variable], template)
			}

			if tokens[0] == "block" {
				template := tokens[1]
				if _, ok := templates[template]; !ok {
					templates[template] = make(map[string]string)
				}

				blocks = append(blocks, template)
			}

		case "with", "range":
			blocks = append(blocks, tokens[0])

		case "end":
			if len(blocks) <= 1 {
				break
			}
			blocks = blocks[:len(blocks)-1]
		}
	}

	return &generationData{
		templates: templates,
		imports:   imports,
		calls:     calls,
	}
}

func createWriteFuncs(name, path string, data *generationData) map[string]string {
	result := make(map[string]string)

	for template := range data.templates {
		if template == "" {
			result[name] = createWriteFunc(name, path)
		} else {
			result[name+ComponentName(strings.Trim(template, "\""))] = createWriteTemplateFunc(name, path, template)
		}
	}

	return result
}

func createTypes(name, path string, data *generationData) map[string]string {
	result := make(map[string]string)

	for template, variables := range data.templates {

		fields := ""

		for v, variableType := range variables {

			if v == "." {
				continue
			}

			types := data.calls[template][v]
			variableName := v[1:]

			if variableType != "any" {
				fields += fmt.Sprintf("%s %s\n", variableName, variableType)
			} else if len(types) == 1 {
				fields += fmt.Sprintf("%s %s\n", variableName, name+ComponentName(strings.Trim(types[0], "\""))+"Data")
			} else if len(types) > 1 {
				fields += variableName + " " + createMergedStruct(name, types, data)
			} else {
				fields += fmt.Sprintf("%s any\n", variableName)
			}
		}

		componentName := name + ComponentName(strings.Trim(template, "\""))
		typeName := componentName + "Data"

		if template == "" {
			typeName = name + "Data"
		}

		result[componentName] = fmt.Sprintf("type %s struct { %s }", typeName, fields)
	}

	return result
}

func createMergedStruct(name string, templates []string, data *generationData) string {
	str := "struct {\n"

	fields := make(map[string]string)

	for _, template := range templates {
		for v := range data.templates[template] {

			if v == "." {
				continue
			}

			types := data.calls[template][v]

			if len(types) == 1 {
				fields[v] = name + ComponentName(strings.Trim(types[0], "\"")) + "Data"
			} else if len(types) > 1 {
				fields[v] = createMergedStruct(name, types, data)
			} else {
				fields[v] = "any"
			}
		}
	}

	for n, t := range fields {
		str += fmt.Sprintf("%s %s\n", n[1:], t)
	}

	return str + "}\n"
}

func createVariables(names map[string]string) string {
	str := "var (\n"

	for _, name := range names {
		str += fmt.Sprintf("%s *melt.Component\n", name)
	}

	return str + ")"
}

func createLoad(components map[string]string) string {
	str := "func Load(furnace *melt.Furnace) {\n"

	for path, name := range components {
		str += fmt.Sprintf("%s = furnace.MustGetComponent(\"%s\")\n", name, path)
	}

	return str + "}"

}

func createWriteFunc(name, path string) string {
	return fmt.Sprintf(`
		// generated write function for component
		//
		//	path: "%s"
		func Write%s(w io.Writer, data %sData) error {
			return %s.Write(w, data)
		}
`, path, name, name, name)
}

func createWriteTemplateFunc(name, path, template string) string {

	source := name
	name += ComponentName(strings.Trim(template, "\""))

	return fmt.Sprintf(`
		// generated write function for a template in a component
		//
		//	path: "%s"
		//	template: %s
		func Write%s(w io.Writer, data %sData) error {
			return %s.WriteTemplate(w, %s, data)
		}
	`, path, template, name, name, source, template)
}
